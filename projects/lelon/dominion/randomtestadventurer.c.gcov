        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************* 
        -:    2: * Program: randomtestadventurer 
        -:    3: * Author: Long Le
        -:    4: * Date: 13-Nov-2018 
        -:    5: * Class: CS362
        -:    6: * Instructor: Jaki Shaik
        -:    7: * Assignment 4 
        -:    8: * Description: Random testing program for the adventurer card. 
        -:    9: * There are n number of test runs. Each test run consists of randomly
        -:   10: * inserted cards. The goal of the test is to see if the effects of the
        -:   11: * adventurer card is still consistent with a large number of runs. There
        -:   12: * are 3 assertions that are verified after each card call.
        -:   13: * 1. asserts a maximum of 2 cards drawn. 
        -:   14: * 2. asserts that the number of cards drawn cannot be more than the number
        -:   15: * of treasure cards in the deck. 
        -:   16: * 3. asserts that if there are no treasure cards in the deck, no cards
        -:   17: * should be drawn.
        -:   18: * NOTE: testUpdateCoins.c was used as a base template.
        -:   19: *************************************************************************/
        -:   20:
        -:   21:#include "dominion.h"
        -:   22:#include "dominion_helpers.h"
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:#include <stdlib.h>
        -:   26:#include <time.h>
        -:   27:#include "rngs.h"
        -:   28:
        -:   29:int assertion(int statement);  // custom assert statement
        -:   30:
        -:   31:// set NOISY_TEST to 0 to remove printfs from output
        -:   32:#define NOISY_TEST 0
        -:   33:
function main called 1 returned 100% blocks executed 100%
        1:   34:int main() {
        1:   35:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   36:    int testsPassed=1;
        -:   37:    int i;
        1:   38:    int seed = 1000;
        1:   39:    int numPlayer = 2;
        -:   40:    //int maxBonus = 10;
        1:   41:    int p=0, handCount=0;
        1:   42:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   43:               , remodel, smithy, village, baron, great_hall};
        -:   44:    struct gameState G;
        -:   45:    //int maxHandCount = 5;
        1:   46:    int maxDeckCount = 4;
        -:   47:
        -:   48:    int cards[MAX_HAND]; 
        -:   49:    
        -:   50:    //for (i = 0; i < handCount; i++)
        -:   51:    //{
        -:   52:    //    cards[i] = adventurer;
        -:   53:    //}
        -:   54:
        -:   55:
        1:   56:    printf ("\nStart random TESTING adventurer card effects:\n\n");
call    0 returned 100%
        -:   57:
        -:   58:    // start of random testing 
        1:   59:    const int timesToTest = 100000; 
        -:   60:
   100001:   61:    for(int i=0; i<timesToTest; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   100000:   62:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
   100000:   63:        initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
   100000:   64:        G.handCount[p] = handCount;                 // set the number of cards on hand
   100000:   65:        memcpy(G.hand[p], cards, sizeof(int) * handCount); // set all the cards to adventurer 
        -:   66:
        -:   67:        // Clear all treasure cards
        -:   68:        int count;
   500000:   69:        for(count=0; count<maxDeckCount; count++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   400000:   70:            G.deck[p][count] = adventurer; 
        -:   71:        }
        -:   72:
   100000:   73:        G.deckCount[p] = maxDeckCount; // reset
        -:   74:
   100000:   75:        int treasureCount = 0;
        -:   76:
        -:   77:        // add random cards to deck
   500000:   78:        for(int j=0; j<maxDeckCount; j++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   400000:   79:            enum CARD c = rand() % 27; 
call    0 returned 100%
   400000:   80:            G.deck[p][j] = c;
   400000:   81:            if(c == copper || c == silver || c == gold) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
    44471:   82:                ++treasureCount; 
        -:   83:            }
        -:   84:        }
        -:   85:
   100000:   86:        int origHandCount = G.handCount[p]; 
        -:   87:
   100000:   88:        cardEffect(adventurer, 0, 0, 0, &G, 0, 0); // play adventurer card
call    0 returned 100%
        -:   89:
        -:   90:        // check if any cards were drawn
   100000:   91:        if(origHandCount < G.handCount[p]) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
    55759:   92:            int cardsDrawn = G.handCount[p] - origHandCount;
    55759:   93:            if(!assertion(cardsDrawn < 3)) {     // should only draw up to 2 cards
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
     2151:   94:                printf("\nERROR during TEST %d: more than 2 cards were drawn.\n", i+1);
call    0 returned 100%
     2151:   95:                testsPassed = 0;
        -:   96:            } 
    55759:   97:            if(!assertion(cardsDrawn <= treasureCount)) {    // cards drawn should not exceed number of treasure cards
call    0 returned 100%
branch  1 taken 47% (fallthrough)
branch  2 taken 53%
    26283:   98:                printf("\nERROR during TEST %d: %d card(s) drawn but %d treasure cards in deck.\n", i+1, cardsDrawn, treasureCount);
call    0 returned 100%
    26283:   99:                if(cardsDrawn == 3) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     1675:  100:                    printf("  ->The cards drawn were %d, %d, and %d\n", G.deck[p][G.handCount[p]-1], G.deck[p][G.handCount[p]-2], G.deck[p][G.handCount[p]-3]);
call    0 returned 100%
    24608:  101:                } else if(cardsDrawn == 2) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     8786:  102:                    printf("  ->The cards drawn were %d and %d\n", G.deck[p][G.handCount[p]-1], G.deck[p][G.handCount[p]-2]);
call    0 returned 100%
    15822:  103:                } else if(cardsDrawn == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    15822:  104:                    printf("  ->The card drawn was %d\n", G.deck[p][G.handCount[p]-1]);
call    0 returned 100%
        -:  105:                }
    26283:  106:                testsPassed = 0;
        -:  107:            } 
        -:  108:        } 
        -:  109:        //else {
   100000:  110:            if(!assertion(treasureCount == 0)) {     // If no cards are drawn, there should be no treasure cards in deck
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
    37571:  111:                printf("\nERROR during TEST %d: there were no cards drawn but there are %d treasure cards in deck.\n", i+1, treasureCount);
call    0 returned 100%
    37571:  112:                testsPassed = 0;
        -:  113:            } 
        -:  114:        //}
        -:  115:    }
        -:  116:   
        -:  117:///***************************TEST 1*******************************/
        -:  118://         /**Check how many treasure cards are added*/
        -:  119://
        -:  120://    // Put 1 treasure cards in deck
        -:  121://    G.deck[p][0] = copper;
        -:  122://#if (NOISY_TEST == 1)
        -:  123://    printf("Test 1 - check how many treasure cards are added.\n\n");
        -:  124://#endif
        -:  125://
        -:  126://#if (NOISY_TEST == 1)
        -:  127://    printf("Testing with 1 treasure card in deck.\nOnly 1 card should be added to hand.\n");
        -:  128://#endif
        -:  129://    int origCardsInHand = G.handCount[p];
        -:  130://
        -:  131://    cardEffect(adventurer, 0, 0, 0, &G, 0, 0);
        -:  132://
        -:  133://#if (NOISY_TEST == 1)
        -:  134://    testsPassed = assertion(G.handCount[p]==origCardsInHand+1);
        -:  135://    if(!testsPassed) {
        -:  136://        printf("%d card(s) were added.\n", G.handCount[p]-origCardsInHand);
        -:  137://    }
        -:  138://#endif
        -:  139://
        -:  140://    origCardsInHand = G.handCount[p];
        -:  141://    G.deckCount[p] = maxDeckCount; // reset
        -:  142://
        -:  143://#if (NOISY_TEST == 1)
        -:  144://    printf("Testing with 2 treasure cards in deck.\n2 cards should be added to hand.\n");
        -:  145://#endif
        -:  146://    // Put 2 treasure cards in deck
        -:  147://    G.deck[p][0] = copper; 
        -:  148://    G.deck[p][1] = silver; 
        -:  149://    cardEffect(adventurer, 0, 0, 0, &G, 0, 0);
        -:  150://
        -:  151://#if (NOISY_TEST == 1)
        -:  152://    testsPassed = assertion(G.handCount[p]==origCardsInHand+2);
        -:  153://    if(!testsPassed) {
        -:  154://        printf("%d card(s) were added.\n", G.handCount[p]-origCardsInHand);
        -:  155://    }
        -:  156://#endif
        -:  157://
        -:  158://    origCardsInHand = G.handCount[p];
        -:  159://    G.deckCount[p] = maxDeckCount; // reset
        -:  160://
        -:  161://#if (NOISY_TEST == 1)
        -:  162://    printf("Testing with 3 treasure cards in deck.\nOnly 2 cards should be added to hand.\n");
        -:  163://#endif
        -:  164://    // Put 3 treasure cards in deck
        -:  165://    G.deck[p][0] = copper; 
        -:  166://    G.deck[p][1] = silver;
        -:  167://    G.deck[p][2] = gold; 
        -:  168://    cardEffect(adventurer, 0, 0, 0, &G, 0, 0);
        -:  169://
        -:  170://#if (NOISY_TEST == 1)
        -:  171://    testsPassed = assertion(G.handCount[p]==origCardsInHand+2);
        -:  172://    if(!testsPassed) {
        -:  173://        printf("%d card(s) were added.\n", G.handCount[p]-origCardsInHand);
        -:  174://    }
        -:  175://#endif
        -:  176:
        -:  177:/***************************TEST 2*******************************/
        -:  178:/**Check if cards other than treasure cards are counted as treasure cards*/
        -:  179://#if (NOISY_TEST == 1)
        -:  180://    printf("\nTest 3 - check if other cards are counted as a treasure card.\n\n");
        -:  181://#endif
        -:  182://    int maxCardTypes = 27;
        -:  183://    int passing = 1;
        -:  184://    int j;
        -:  185://    G.deckCount[p] = maxDeckCount;
        -:  186://
        -:  187://
        -:  188://    // Check every card in the game.
        -:  189://    for(i=0; i<maxCardTypes && passing == 1; i++) {
        -:  190://        // reset
        -:  191://        G.handCount[p] = 0;
        -:  192://        G.deckCount[p] = maxDeckCount;
        -:  193://
        -:  194://#if (NOISY_TEST == 1)
        -:  195://        printf("\nChecking card %d\n", i);
        -:  196://#endif
        -:  197://        if(i < 4 || i > 6) { // only test on non-treasure cards.
        -:  198://            for(j=0; j<maxDeckCount; j++) {
        -:  199://                G.deck[p][0] = i;    
        -:  200://            }
        -:  201://
        -:  202://            cardEffect(adventurer, 0, 0, 0, &G, 0, 0);
        -:  203://            passing = assertion(G.handCount[p]>1);
        -:  204://
        -:  205://            if(!passing) {
        -:  206://                printf("ERROR: Card %d counted as a treasure card!\n", i);
        -:  207://                testsPassed = 0;
        -:  208://            }
        -:  209://
        -:  210://        }
        -:  211://    }
        -:  212://
        1:  213:    if(testsPassed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  214:        // printf("\nALL TESTS SUCCESSFULLY PASSED!\n");
        -:  215:    } else {
        1:  216:        printf("\nTEST FAILURES DETECTED\n");
call    0 returned 100%
        -:  217:    } 
        -:  218:
        1:  219:    return 0;
        -:  220:}
        -:  221:
        -:  222:/************************************************************************* 
        -:  223: * Description: Custom assertion function to be able to use with coverage
        -:  224: * programs (does not stop program).
        -:  225: * @param a - test conditional statement; false == 0, true >= 1.
        -:  226: *************************************************************************/
function assertion called 211518 returned 100% blocks executed 100%
   211518:  227:int assertion(int statement) {
   211518:  228:    if(statement<=0) { // if test statement is false
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:  229:#if (NOISY_TEST == 1)
        -:  230:        printf("TEST FAILED! ");    
        -:  231:#endif
    66005:  232:        return 0;
        -:  233:    }
        -:  234:
        -:  235:#if (NOISY_TEST == 1)
        -:  236:    printf("TEST PASSED\n\n");    
        -:  237:#endif
   145513:  238:    return 1;
        -:  239:}
