        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************* 
        -:    2: * Program: unittest4
        -:    3: * Author: Long Le
        -:    4: * Date: 28-Oct-2018 
        -:    5: * Class: CS362
        -:    6: * Instructor: Jaki Shaik
        -:    7: * Assignment 3 
        -:    8: * Description: Unit test program for function drawCard().
        -:    9: * NOTE: testUpdateCoins.c was used as a base template.
        -:   10: *************************************************************************/
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include <string.h>
        -:   15:#include <stdio.h>
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:int assertion(int a); 
        -:   19:
        -:   20:// set NOISY_TEST to 0 to remove printfs from output
        -:   21:#define NOISY_TEST 1
        -:   22:
function main called 1 returned 100% blocks executed 73%
        1:   23:int main() {
        1:   24:    int testsPassed=1;
        -:   25:    int i;
        1:   26:    int seed = 1000;
        1:   27:    int numPlayer = 2;
        -:   28:    //int maxBonus = 10;
        1:   29:    int p=0, handCount=0;
        1:   30:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   31:               , remodel, smithy, village, baron, great_hall};
        -:   32:    struct gameState G;
        -:   33:    //int maxHandCount = 5;
        1:   34:    int maxDeckCount = 5;
        -:   35:
        -:   36:    int cards[MAX_HAND]; 
        -:   37:    
        1:   38:    for (i = 0; i < handCount; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:   39:    {
    #####:   40:        cards[i] = adventurer;
        -:   41:    }
        -:   42:
        1:   43:    printf ("TESTING drawCard():\n");
call    0 returned 100%
        1:   44:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   45:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        1:   46:    G.handCount[p] = handCount;                 // set the number of cards on hand
        1:   47:    memcpy(G.hand[p], cards, sizeof(int) * handCount); // set all the cards to adventurer 
        -:   48:
        -:   49:    // Clear all treasure cards.
        -:   50:    int count;
        6:   51:    for(count=0; count<maxDeckCount; count++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   52:        G.deck[p][count] = adventurer; 
        -:   53:    }
        -:   54:
        -:   55:/***************************TEST 1*******************************/
        -:   56:      /**Check how many cards were drawn by each player*/
        -:   57:
        -:   58:#if (NOISY_TEST == 1)
        1:   59:    printf("\nTest 1 - verify cards are drawn from the player's deck to the player's hand\n");
call    0 returned 100%
        1:   60:    printf("Testing with 5 cards in the deck\n");
call    0 returned 100%
        -:   61:#endif
        -:   62:     
        6:   63:    for(i=0; i<maxDeckCount; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   64:        int count = G.deckCount[p];
        5:   65:        int hcount = G.handCount[p];
        -:   66:        //printf("\nCount: %d\n", count);
        5:   67:        drawCard(p, &G);
call    0 returned 100%
        5:   68:        if(!assertion(G.deckCount[p] == count-1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   69:#if (NOISY_TEST == 1)
    #####:   70:            printf("\nERROR: deck did not decrement count!\n");
call    0 never executed
        -:   71:#endif
    #####:   72:            testsPassed = 0;
        -:   73:        }
        5:   74:        if(!assertion(G.handCount[p] == hcount+1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   75:#if (NOISY_TEST == 1)
    #####:   76:            printf("\nERROR: hand did not increment count!\n");
call    0 never executed
        -:   77:#endif
    #####:   78:            testsPassed = 0;
        -:   79:        }
        -:   80:    }   
        -:   81:
        -:   82:#if (NOISY_TEST == 1)
        1:   83:    printf("\nTest 2 - verify cards once deck is empty, discarded cards are shuffled into deck\n");
call    0 returned 100%
        1:   84:    printf("5 cards are added to the discard pile\n");
call    0 returned 100%
        -:   85:#endif
        1:   86:    G.discardCount[p] = 4;
        -:   87:
        -:   88:    // add cards to discard pile
        5:   89:    for(count=0; count<4; count++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   90:        G.discard[p][count] = copper; 
        -:   91:    }
        -:   92:
        1:   93:    int dcount = G.discardCount[p];
        1:   94:    int hcount = G.handCount[p];
        1:   95:    drawCard(p, &G);
call    0 returned 100%
        1:   96:    if(!assertion(G.deckCount[p] > 0 && G.discardCount !=0)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   97:#if (NOISY_TEST == 1)
    #####:   98:        printf("\nERROR: discard pile did not get shuffled into deck!\n");
call    0 never executed
        -:   99:#endif
    #####:  100:        testsPassed = 0;
        -:  101:    }
        1:  102:    if(!assertion(G.deckCount[p] == dcount-1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  103:#if (NOISY_TEST == 1)
    #####:  104:        printf("\nERROR: discard pile did not decrement!\n");
call    0 never executed
        -:  105:#endif
    #####:  106:        testsPassed = 0;
        -:  107:    }
        1:  108:    if(!assertion(G.handCount[p] == hcount+1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  109:#if (NOISY_TEST == 1)
    #####:  110:        printf("\nERROR: hand did not increment count!\n");
call    0 never executed
        -:  111:#endif
    #####:  112:        testsPassed = 0;
        -:  113:    }
        -:  114:    
        -:  115:
        1:  116:    if(testsPassed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  117:        printf("\nALL TESTS SUCCESSFULLY PASSED!\n");
call    0 returned 100%
        -:  118:    } else {
    #####:  119:        printf("\nTEST FAILURES DETECTED\n");
call    0 never executed
        -:  120:    }
        -:  121:}
        -:  122:
        -:  123:/************************************************************************* 
        -:  124: * Description: Custom assertion function to be able to use with coverage
        -:  125: * programs (does not stop program).
        -:  126: * @param a - test conditional statement; false == 0, true >= 1.
        -:  127: *************************************************************************/
function assertion called 13 returned 100% blocks executed 67%
       13:  128:int assertion(int a) {
       13:  129:    if(a<=0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  130:        printf("TEST FAILED! ");    
call    0 never executed
    #####:  131:        return 0;
        -:  132:    }
        -:  133:
        -:  134:#if (NOISY_TEST == 1)
       13:  135:    printf("TEST PASSED\n");    
call    0 returned 100%
        -:  136:#endif
       13:  137:    return 1;
        -:  138:}
