        -:    0:Source:randomtesttreasuremap.c
        -:    0:Graph:randomtesttreasuremap.gcno
        -:    0:Data:randomtesttreasuremap.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************* 
        -:    2: * Program: randomtesttreasuremap 
        -:    3: * Author: Long Le
        -:    4: * Date: 13-Nov-2018 
        -:    5: * Class: CS362
        -:    6: * Instructor: Jaki Shaik
        -:    7: * Assignment 4 
        -:    8: * Description: 
        -:    9: * Test 1 - Tests the effects of using the treasureMapCard function.
        -:   10: * NOTE: testUpdateCoins.c was used as a base template.
        -:   11: *************************************************************************/
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include <string.h>
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <time.h>
        -:   19:#include "rngs.h"
        -:   20:
        -:   21:int assertion(int statement); 
        -:   22:
        -:   23:// set NOISY_TEST to 0 to remove printfs from output
        -:   24:#define NOISY_TEST 0
        -:   25:
function main called 1 returned 100% blocks executed 86%
        1:   26:int main() {
        1:   27:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   28:    int testsPassed=1;
        -:   29:    int i;
        1:   30:    int seed = 1000;
        1:   31:    int numPlayer = 2;
        -:   32:    //int maxBonus = 10;
        1:   33:    int p=0, handCount=0;
        1:   34:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   35:               , remodel, smithy, village, baron, great_hall};
        -:   36:    struct gameState G;
        -:   37:    //int maxHandCount = 5;
        1:   38:    int maxDeckCount = 5;
        -:   39:
        -:   40:    int cards[MAX_HAND]; 
        -:   41:    
        1:   42:    for (i = 0; i < handCount; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:   43:    {
    #####:   44:        cards[i] = adventurer;
        -:   45:    }
        -:   46:
        1:   47:    printf ("Start random TESTING Treasure Map card effects:\n");
call    0 returned 100%
        -:   48:
        1:   49:    const int NUM_TESTS = 100000;
        -:   50:
   100001:   51:    for(int n=0; n<NUM_TESTS; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   100000:   52:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
   100000:   53:        initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   54:    //    G.handCount[p] = handCount;                 // set the number of cards on hand
        -:   55:    //    memcpy(G.hand[p], cards, sizeof(int) * handCount); // set all the cards to adventurer 
        -:   56:
   100000:   57:        int playerBeingTested = 0;
   100000:   58:        int goldCount = 0;;
   100000:   59:        const int setDeckCount = 5;
   100000:   60:        int numTreasureMapCards = rand() % 2 + 1;
call    0 returned 100%
        -:   61:
   100000:   62:        if(numTreasureMapCards == 1) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   63:        /***************************TEST 1*******************************/
        -:   64:              /**Check how many cards were drawn by player*/
        -:   65:
        -:   66:        #if (NOISY_TEST == 1)
        -:   67:                printf("\nTest 1a - only 1 treasure map in player's hand\n");
        -:   68:        #endif
        -:   69:            
        -:   70:            // set all player's cards in hand to 0 and decks.
   150351:   71:            for(i=0; i<numPlayer; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
   100234:   72:                G.handCount[i] = 0;
   100234:   73:                G.deckCount[i] = setDeckCount;
        -:   74:
        -:   75:                // all cards in decks will be smithy
   601404:   76:                for(int j=0; j<setDeckCount; j++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   501170:   77:                    G.deck[i][j] = smithy;
        -:   78:                }
        -:   79:            }
        -:   80:
        -:   81:            // count gold cards in deck
        -:   82:            //for(i=0; i<G.deckCount[playerBeingTested]; i++) {
        -:   83:            //    if(G.deck[playerBeingTested][i] == gold) {
        -:   84:            //        ++goldCount;
        -:   85:            //    }
        -:   86:            //}
        -:   87:
    50117:   88:            printf("\n");
call    0 returned 100%
        -:   89:        #if (NOISY_TEST == 1)
        -:   90:            for(i=0; i<G.handCount[playerBeingTested]; i++) {
        -:   91:                printf("cards: %d ", i);
        -:   92:            }
        -:   93:        #endif
        -:   94:
    50117:   95:            G.handCount[playerBeingTested]++;
    50117:   96:            G.hand[playerBeingTested][0] = treasure_map;
        -:   97:
    50117:   98:            int goldCount2nd = 0;
        -:   99:
        -:  100:            //treasureMapCard(&G, playerBeingTested, 0);
    50117:  101:            cardEffect(treasure_map, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        -:  102:            
        -:  103:            // count gold cards in deck
   300702:  104:            for(i=0; i<G.deckCount[playerBeingTested]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   250585:  105:                if(G.deck[playerBeingTested][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:                    ++goldCount2nd;
        -:  107:                }
        -:  108:            }
        -:  109:
    50117:  110:            int testResults = assertion(goldCount == goldCount2nd); 
call    0 returned 100%
        -:  111:
    50117:  112:            if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  113:                printf("\nTest %d ERROR: original gold count is %d and current gold count is %d\n", n+1, goldCount, goldCount2nd);
call    0 never executed
    #####:  114:                printf("ERROR: NO GOLD SHOULD BE ADDED TO DECK\n");
call    0 never executed
    #####:  115:                testsPassed = 0;
        -:  116:            }
    49883:  117:        } else if(numTreasureMapCards == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  118:            // Test with 2 treasure map cards
        -:  119:        #if (NOISY_TEST == 1)
        -:  120:                printf("\nTest 1b - 2 treasure map cards in player's hand\n");
        -:  121:        #endif
    49883:  122:            G.handCount[playerBeingTested] = 0;
    49883:  123:            G.deckCount[playerBeingTested] = setDeckCount;
        -:  124:
        -:  125:            // all cards in decks will be smithy
   299298:  126:            for(int j=0; j<setDeckCount; j++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   249415:  127:                G.deck[playerBeingTested][j] = smithy;
        -:  128:            }
        -:  129:
        -:  130:            // count gold cards in deck
   299298:  131:            for(i=0; i<G.deckCount[playerBeingTested]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   249415:  132:                if(G.deck[playerBeingTested][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  133:                    ++goldCount;
        -:  134:                }
        -:  135:            }
        -:  136:
        -:  137:            // add 2 treasure maps card to hand 
    49883:  138:            G.deck[playerBeingTested][0] = treasure_map;
    49883:  139:            G.deck[playerBeingTested][1] = treasure_map;
    49883:  140:            G.handCount[playerBeingTested] += 2;
        -:  141:
    49883:  142:            int goldCount2nd = 0;
        -:  143:
        -:  144:            //treasureMapCard(&G, playerBeingTested, 0);
        -:  145:            
    49883:  146:            cardEffect(treasure_map, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        -:  147:
        -:  148:            // count gold cards in deck
   299298:  149:            for(i=0; i<G.deckCount[playerBeingTested]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   249415:  150:                if(G.deck[playerBeingTested][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  151:                    ++goldCount2nd;
        -:  152:                }
        -:  153:            }
        -:  154:
    49883:  155:            int testResults = assertion(goldCount2nd == goldCount+4); 
call    0 returned 100%
        -:  156:
    49883:  157:            if(!testResults) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    49883:  158:                printf("\nTest %d ERROR: original gold count is %d and current gold count is %d\n", n+1, goldCount, goldCount2nd);
call    0 returned 100%
    49883:  159:                printf("ERROR: 4 gold cards should be received into deck\n");
call    0 returned 100%
    49883:  160:                testsPassed = 0;
        -:  161:            }
        -:  162:        }
        -:  163:    }
        -:  164:
        1:  165:    if(testsPassed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  166:        printf("\nALL TESTS SUCCESSFULLY PASSED!\n");
call    0 never executed
        -:  167:    } else {
        1:  168:        printf("\nTEST FAILURES DETECTED\n");
call    0 returned 100%
        -:  169:    } 
        -:  170:
        1:  171:    return 0;
        -:  172:}
        -:  173:
        -:  174:/************************************************************************* 
        -:  175: * Description: Custom assertion function to be able to use with coverage
        -:  176: * programs (does not stop program).
        -:  177: * @param statement - test conditional statement; false == 0, true >= 1.
        -:  178: *************************************************************************/
function assertion called 100000 returned 100% blocks executed 100%
   100000:  179:int assertion(int statement) {
   100000:  180:    if(statement<=0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  181:#if (NOISY_TEST == 1)
        -:  182:        printf("TEST FAILED! ");    
        -:  183:#endif
    49883:  184:        return 0;
        -:  185:    }
        -:  186:
        -:  187:#if (NOISY_TEST == 1)
        -:  188:    printf("TEST PASSED\n");    
        -:  189:#endif
    50117:  190:    return 1;
        -:  191:}
