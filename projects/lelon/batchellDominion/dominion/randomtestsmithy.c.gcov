        -:    0:Source:randomtestsmithy.c
        -:    0:Graph:randomtestsmithy.gcno
        -:    0:Data:randomtestsmithy.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************* 
        -:    2: * Program: randomtestsmithy 
        -:    3: * Author: Long Le
        -:    4: * Date: 13-Nov-2018 
        -:    5: * Class: CS362
        -:    6: * Instructor: Jaki Shaik
        -:    7: * Assignment 4 
        -:    8: * Description: Random testing program for the smithy card. There are n
        -:    9: * number of test runs. Each test run consists of a random deck size from 1
        -:   10: * to 5. Since this is a very simple card, the randomized testing will be
        -:   11: * checking if the result is as intended, over a large number of runs.
        -:   12: * 1. Tests how many cards were drawn by each player. 
        -:   13: * 2. Tests minimum edge cases - deck = 2, 1, and 0. 
        -:   14: * 3. Check if cards were drawn from the user's deck. 
        -:   15: * NOTE: testUpdateCoins.c was used as a base template.
        -:   16: *************************************************************************/
        -:   17:
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include <string.h>
        -:   21:#include <stdio.h>
        -:   22:#include <stdlib.h>
        -:   23:#include <time.h>
        -:   24:#include "rngs.h"
        -:   25:
        -:   26:int assertion(int statement); 
        -:   27:
        -:   28:// set NOISY_TEST to 0 to remove printfs from output
        -:   29:#define NOISY_TEST 0
        -:   30:
function main called 1 returned 100% blocks executed 81%
        1:   31:int main() {
        1:   32:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   33:    int testsPassed=1;
        -:   34:    int i;
        1:   35:    int seed = 1000;
        1:   36:    int numPlayer = 2;
        -:   37:    //int maxBonus = 10;
        1:   38:    int p=0, handCount=0;
        1:   39:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   40:               , remodel, smithy, village, baron, great_hall};
        -:   41:    struct gameState G;
        -:   42:    //int maxHandCount = 5;
        1:   43:    int maxDeckCount = 4;
        -:   44:
        -:   45:    int cards[MAX_HAND]; 
        -:   46:    
        1:   47:    for (i = 0; i < handCount; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:   48:    {
    #####:   49:        cards[i] = adventurer;
        -:   50:    }
        -:   51:
        1:   52:    const int numTests = 100000;
        -:   53:
        1:   54:    printf ("\nStart random TESTING smithy card effects:\n");
call    0 returned 100%
   100001:   55:    for(int n=0; n<numTests; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   100000:   56:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
   100000:   57:        initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
   100000:   58:        G.handCount[p] = handCount;                 // set the number of cards on hand
   100000:   59:        memcpy(G.hand[p], cards, sizeof(int) * handCount); // set all the cards to adventurer 
        -:   60:        
        -:   61:        // Clear all treasure cards.
        -:   62:        int count;
   500000:   63:        for(count=0; count<maxDeckCount; count++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
   400000:   64:            G.deck[p][count] = adventurer; 
        -:   65:        }
        -:   66:
   100000:   67:        G.deckCount[p] = maxDeckCount; // reset
        -:   68:       
        -:   69:    /***************************TEST 1*******************************/
        -:   70:          /**Check how many cards were drawn by each player*/
        -:   71:
        -:   72:    #if (NOISY_TEST == 1)
        -:   73:            printf("\nTest 1 - verify players' drawn cards");
        -:   74:    #endif
   100000:   75:        int setDeckCount = rand() % 6;
call    0 returned 100%
        -:   76:        
        -:   77:        // set all player's cards in hand to 0 and decks to random number between 0 and 5. 
   300000:   78:        for(i=0; i<numPlayer; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
   200000:   79:            G.handCount[i] = 0;
   200000:   80:            G.deckCount[i] = setDeckCount;
        -:   81:
        -:   82:            // all cards in decks will be smithy
  1200000:   83:            for(int j=0; j<5; j++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  1000000:   84:                G.deck[i][j] = smithy;
        -:   85:            }
        -:   86:        }
        -:   87:        
   100000:   88:        int playerBeingTested = 0;
        -:   89:        // test player 0
   100000:   90:        G.handCount[0] = 1;
   100000:   91:        G.hand[playerBeingTested][0] = smithy;
   100000:   92:        cardEffect(smithy, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        -:   93:
        -:   94:        int testResults;
        -:   95:        // test how many cards each player has
   300000:   96:        for(i=0; i<numPlayer; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   97:    #if (NOISY_TEST == 1)
        -:   98:            printf("\nPlayer %d card on hand count is: %d\n", i, G.handCount[i]);
        -:   99:    #endif
   200000:  100:            if(i==playerBeingTested) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   100000:  101:                if(setDeckCount >= 3) { 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    49819:  102:                    testResults = assertion(G.handCount[playerBeingTested] == 3);
call    0 returned 100%
        -:  103:
    49819:  104:                    if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:                        printf("\nTest %d ERROR: Player %d should have drawn 3 cards!\n", n+1, playerBeingTested);
call    0 never executed
    #####:  106:                        testsPassed = 0;
        -:  107:                    }
    50181:  108:                } else if(setDeckCount == 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    16699:  109:                    testResults = assertion(G.handCount[playerBeingTested] == 2);
call    0 returned 100%
        -:  110:
    16699:  111:                    if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:                        printf("\nTest %d ERROR: 2 cards in deck! Player %d should have drawn 2 cards!\n", n+1, playerBeingTested);
call    0 never executed
    #####:  113:                        testsPassed = 0;
        -:  114:                    }
    33482:  115:                } else if(setDeckCount == 1) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    16633:  116:                    testResults = assertion(G.handCount[playerBeingTested] == 1);
call    0 returned 100%
        -:  117:
    16633:  118:                    if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  119:                        printf("\nTest %d ERROR: Only 1 card in deck! Player %d should have drawn 1 card!\n", n+1, playerBeingTested);
call    0 never executed
    #####:  120:                        testsPassed = 0;
        -:  121:                    }
    16849:  122:                } else if(setDeckCount < 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    16849:  123:                    testResults = assertion(G.handCount[playerBeingTested] == 0);
call    0 returned 100%
        -:  124:
    16849:  125:                    if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  126:                        printf("\nTest %d ERROR: 0 cards in deck! Player %d should have drawn 0 cards!\n", n+1, playerBeingTested);
call    0 never executed
    #####:  127:                        testsPassed = 0;
        -:  128:                    }
        -:  129:                }
        -:  130:            } else {
   100000:  131:                testResults = assertion(G.handCount[i] == 0);
call    0 returned 100%
        -:  132:
   100000:  133:                if(!testResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  134:                    printf("Test %d ERROR: Player %d should not have drawn any cards!\n", n+1, i);
call    0 never executed
    #####:  135:                    testsPassed = 0;
        -:  136:                }
        -:  137:            }
        -:  138:        }
        -:  139:
        -:  140:    /***************************TEST 2*******************************/
        -:  141:          /**Check if card was drawn from current player's deck.*/
        -:  142:    #if (NOISY_TEST == 1)
        -:  143:        printf("\nTest 2 - verify if the user's deck was drawn from\n");
        -:  144:    #endif
   100000:  145:        testResults = assertion(G.deckCount[playerBeingTested] < setDeckCount );
call    0 returned 100%
        -:  146:
   100000:  147:        if(!testResults) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    16849:  148:            printf("Test %d ERROR: Player %d's deck was not drawn from!\n", n+1, playerBeingTested);
call    0 returned 100%
    16849:  149:            testsPassed = 0;
        -:  150:        } 
        -:  151:
   100000:  152:        printf("\n");
call    0 returned 100%
        -:  153:    }
        -:  154:
        1:  155:    if(testsPassed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  156:        printf("\nALL TESTS SUCCESSFULLY PASSED!\n");
call    0 never executed
        -:  157:    } else {
        1:  158:        printf("\nTEST FAILURES DETECTED\n");
call    0 returned 100%
        -:  159:    } 
        -:  160:
        1:  161:    return 0;
        -:  162:}
        -:  163:
        -:  164:/************************************************************************* 
        -:  165: * Description: Custom assertion function to be able to use with coverage
        -:  166: * programs (does not stop program).
        -:  167: * @param statement - test conditional statement; false == 0, true >= 1.
        -:  168: *************************************************************************/
function assertion called 300000 returned 100% blocks executed 100%
   300000:  169:int assertion(int statement) {
   300000:  170:    if(statement<=0) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  171:#if (NOISY_TEST == 1)
        -:  172:        printf("TEST FAILED! ");    
        -:  173:#endif
    16849:  174:        return 0;
        -:  175:    }
        -:  176:
        -:  177:#if (NOISY_TEST == 1)
        -:  178:    printf("TEST PASSED\n");    
        -:  179:#endif
   283151:  180:    return 1;
        -:  181:}
